2021-08-09 15:59:00 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 15:59:01 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 15:59:04 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic-query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 15:59:04 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 15:59:04 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic-query
2021-08-09 15:59:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 15:59:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 15:59:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 15:59:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 15:59:04 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 15:59:05 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 15:59:05 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 15:59:05 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 15:59:05 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 15:59:06 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 47c0e1df-004c-464e-889c-f0a41e031d35

2021-08-09 15:59:08 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 15:59:08 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 15:59:08 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 15:59:08 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 15:59:10 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8888 is already in use
2021-08-09 15:59:12 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-08-09 15:59:12 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8888 was already in use.

Action:

Identify and stop the process that's listening on port 8888 or configure this application to listen on another port.

2021-08-09 16:00:27 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:00:28 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:00:29 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic-query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:00:29 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:00:29 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic-query
2021-08-09 16:00:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:00:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:00:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:00:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:00:29 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:00:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:00:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:00:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:00:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:00:31 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 97ea2ab5-8702-4521-aad6-74017d0cb271

2021-08-09 16:00:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:00:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:00:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:00:32 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:00:35 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8080
2021-08-09 16:00:36 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.534 seconds (JVM running for 11.994)
2021-08-09 16:12:08 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:12:09 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:12:10 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic-query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:12:10 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:12:10 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic-query
2021-08-09 16:12:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:12:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 48ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:12:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:12:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:12:11 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:12:12 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:12 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:12 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:12 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:12 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: ac512cc1-2e8d-40c5-8d84-c82722c34d0b

2021-08-09 16:12:14 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:12:14 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:12:14 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:12:14 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:12:17 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:12:18 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.539 seconds (JVM running for 12.016)
2021-08-09 16:12:26 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:12:27 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:12:28 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic-query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:12:28 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:12:28 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic-query
2021-08-09 16:12:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:12:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:12:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:12:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:12:28 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:12:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:12:30 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: de8be2d3-501c-4003-8ac3-00f0d6ed70cc

2021-08-09 16:12:31 [main] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:12:31 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:12:31 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:12:31 [main] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:12:33 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8080
2021-08-09 16:12:34 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 9.33 seconds (JVM running for 10.903)
2021-08-09 16:14:29 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:14:30 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:14:31 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic-query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:14:31 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:14:31 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic-query
2021-08-09 16:14:31 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:14:31 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:14:31 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:14:31 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:14:31 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:14:32 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:14:32 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:14:32 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:14:32 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:14:33 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 13c5782b-e808-4d80-b883-1955b556534e

2021-08-09 16:14:35 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:14:35 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:14:35 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:14:35 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:14:37 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8080
2021-08-09 16:14:38 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.551 seconds (JVM running for 12.126)
2021-08-09 16:17:19 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:17:20 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:17:21 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:17:21 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:17:21 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:17:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:17:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:17:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:17:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:17:21 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:17:22 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:17:22 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:17:22 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:17:22 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:17:23 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 7df74cd9-884a-4ad3-9cd8-42959840f5c3

2021-08-09 16:17:24 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:17:24 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:17:24 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:17:24 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:17:27 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:17:28 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.492 seconds (JVM running for 12.064)
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:19:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2021-08-09 16:19:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@78e4c23d, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:19:04 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:19:04 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:19:04 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:20:17 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - request(1)
2021-08-09 16:20:19 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:19 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:19 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:19 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:19 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:19 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@274b0284, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:19 [reactor-http-nio-4] ERROR reactor.Flux.Map.2 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:20:19 [reactor-http-nio-4] ERROR reactor.Flux.Map.2 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:20:19 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:20:36 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - request(1)
2021-08-09 16:20:38 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:38 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:38 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:38 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:38 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:38 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@4e799793, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:20:38 [reactor-http-nio-4] ERROR reactor.Flux.Map.3 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:20:38 [reactor-http-nio-4] ERROR reactor.Flux.Map.3 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:20:38 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:20:46 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:20:47 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:20:48 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:20:48 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:20:48 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:20:48 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:20:48 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:20:48 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:20:48 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:20:48 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:20:49 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:20:49 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:20:49 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:20:49 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:20:50 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 05a43011-2364-4306-bb63-78a09a5f91d1

2021-08-09 16:20:51 [main] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:20:51 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:20:51 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:20:51 [main] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:20:53 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:20:54 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 9.893 seconds (JVM running for 11.317)
2021-08-09 16:21:05 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:21:05 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:21:06 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:21:06 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:06 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:06 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:21:06 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2021-08-09 16:21:08 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:08 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:08 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:08 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:08 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:08 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@1973939b, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:21:08 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:21:08 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:21:08 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:26:27 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:26:28 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:26:29 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:26:29 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:26:29 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:26:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:26:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:26:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:26:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:26:30 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:26:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:26:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:26:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:26:30 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:26:31 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: dd19a5a0-9d96-4ec3-98e2-a39bfb3e24ba

2021-08-09 16:26:33 [main] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:26:33 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:26:33 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:26:33 [main] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:26:35 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:26:36 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 9.836 seconds (JVM running for 11.376)
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:31:05 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2021-08-09 16:31:07 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:07 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:07 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:07 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:07 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:07 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@778587f3, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:31:07 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:31:07 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:31:07 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:33:19 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:33:20 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:33:21 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:33:21 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:33:21 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:33:22 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:33:22 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:33:22 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:33:22 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:33:22 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:33:23 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:33:23 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:33:23 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:33:23 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:33:24 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 2522ad06-86d4-4d4e-9fcc-e4ab8c7e9ce3

2021-08-09 16:33:25 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:33:25 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:33:25 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:33:25 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:33:28 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:33:29 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.818 seconds (JVM running for 12.942)
2021-08-09 16:40:43 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:40:44 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:40:46 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:40:46 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:40:46 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:40:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:40:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:40:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:40:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:40:46 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:40:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:40:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:40:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:40:47 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:40:48 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: b6cc037d-a9b6-4f89-bec7-22ac1c31dca2

2021-08-09 16:40:50 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:40:50 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:40:50 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:40:50 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:40:52 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:40:53 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.979 seconds (JVM running for 12.943)
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:41:02 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2021-08-09 16:41:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:04 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@72f45a49, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:41:04 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:41:04 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:41:04 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:43:44 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:43:44 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:44:08 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:45:10 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:10 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:10 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:45:10 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - request(1)
2021-08-09 16:45:12 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:12 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:12 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:12 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:12 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:12 [reactor-http-nio-4] INFO  reactor.Flux.Map.2 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@18380f16, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:12 [reactor-http-nio-4] ERROR reactor.Flux.Map.2 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:45:12 [reactor-http-nio-4] ERROR reactor.Flux.Map.2 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:45:12 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:45:47 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - request(1)
2021-08-09 16:45:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.3 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@7c24ec32, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:45:49 [reactor-http-nio-4] ERROR reactor.Flux.Map.3 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:45:49 [reactor-http-nio-4] ERROR reactor.Flux.Map.3 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:45:49 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onError(HttpClientConnect.java:353)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onError(PooledConnectionProvider.java:521)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:423)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$5(SimpleDequePool.java:253)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:172)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:302)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.operationComplete(PooledConnectionProvider.java:252)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)
		at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:47:37 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:47:38 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:47:39 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:47:39 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:47:39 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:47:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:47:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:47:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:47:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:47:40 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:47:40 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:47:40 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:47:40 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:47:40 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:47:41 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 3a2b5784-a64e-4ba0-bdf9-d95e63781d51

2021-08-09 16:47:43 [main] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:47:43 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:47:43 [main] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:47:43 [main] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:47:45 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 16:47:46 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 10.234 seconds (JVM running for 12.305)
2021-08-09 16:48:18 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 16:48:18 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 16:48:20 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 16:48:20 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:20 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:20 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 16:48:20 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2021-08-09 16:48:21 [reactor-http-nio-4] WARN  r.n.http.client.HttpClientConnect - [id: 0x69ebaa0d, L:0.0.0.0/0.0.0.0:62640] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2021-08-09 16:48:21 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:21 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:21 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:21 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:21 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:21 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@669f1f62, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 16:48:21 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - onError(org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.)
2021-08-09 16:48:21 [reactor-http-nio-4] ERROR reactor.Flux.Map.1 - 
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:390)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
	at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
	at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
	at reactor.netty.http.client.HttpClientConnect$HttpObserver.onUncaughtException(HttpClientConnect.java:407)
	at reactor.netty.ReactorNetty$CompositeConnectionObserver.onUncaughtException(ReactorNetty.java:511)
	at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onUncaughtException(PooledConnectionProvider.java:549)
	at reactor.netty.resources.PooledConnectionProvider$PooledConnection.onUncaughtException(PooledConnectionProvider.java:385)
	at reactor.netty.http.client.HttpClientOperations.onInboundClose(HttpClientOperations.java:287)
	at reactor.netty.channel.ChannelOperationsHandler.channelInactive(ChannelOperationsHandler.java:76)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
	at io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(ChannelInboundHandlerAdapter.java:81)
	at io.netty.handler.timeout.IdleStateHandler.channelInactive(IdleStateHandler.java:277)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelInactive(CombinedChannelDuplexHandler.java:418)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:389)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:354)
	at io.netty.handler.codec.http.HttpClientCodec$Decoder.channelInactive(HttpClientCodec.java:311)
	at io.netty.channel.CombinedChannelDuplexHandler.channelInactive(CombinedChannelDuplexHandler.java:221)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1405)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:901)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:819)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:164)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:497)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:48:21 [reactor-http-nio-4] ERROR p.m.d.e.q.s.c.a.e.h.ElasticQueryServiceErrorHandler - Service runtime exception!
org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Handler pl.microservices.demo.reactive.elastic.query.service.api.ElasticDocumentController#getDocumentByText(ElasticQueryServiceRequestModel) [DispatcherHandler]
Stack trace:
		at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$null$4(SingleNodeHostProvider.java:106)
		at reactor.core.publisher.MonoErrorSupplied.call(MonoErrorSupplied.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1782)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2344)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2152)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:68)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4213)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2021)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:252)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:197)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:213)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:255)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:406)
		at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:243)
		at reactor.core.publisher.DirectProcessor$DirectInner.onNext(DirectProcessor.java:339)
		at reactor.core.publisher.DirectProcessor.onNext(DirectProcessor.java:148)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:180)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:185)
		at reactor.netty.http.client.HttpClientConnect$HttpObserver.onUncaughtException(HttpClientConnect.java:407)
		at reactor.netty.ReactorNetty$CompositeConnectionObserver.onUncaughtException(ReactorNetty.java:511)
		at reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onUncaughtException(PooledConnectionProvider.java:549)
		at reactor.netty.resources.PooledConnectionProvider$PooledConnection.onUncaughtException(PooledConnectionProvider.java:385)
		at reactor.netty.http.client.HttpClientOperations.onInboundClose(HttpClientOperations.java:287)
		at reactor.netty.channel.ChannelOperationsHandler.channelInactive(ChannelOperationsHandler.java:76)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
		at io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(ChannelInboundHandlerAdapter.java:81)
		at io.netty.handler.timeout.IdleStateHandler.channelInactive(IdleStateHandler.java:277)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelInactive(CombinedChannelDuplexHandler.java:418)
		at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:389)
		at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:354)
		at io.netty.handler.codec.http.HttpClientCodec$Decoder.channelInactive(HttpClientCodec.java:311)
		at io.netty.channel.CombinedChannelDuplexHandler.channelInactive(CombinedChannelDuplexHandler.java:221)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1405)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)
		at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:901)
		at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:819)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:164)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:497)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-09 16:48:55 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 16:48:57 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 16:48:59 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 16:48:59 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 16:48:59 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 16:49:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:49:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 16:49:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 16:49:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 39ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 16:49:01 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 16:49:02 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:49:02 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:49:02 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:49:02 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 16:49:04 [reactor-http-nio-1] WARN  r.n.http.client.HttpClientConnect - [id: 0x21c117d1, L:0.0.0.0/0.0.0.0:52426] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2021-08-09 16:49:04 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 16:49:04 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 16:49:04 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 16:49:04 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 16:49:04 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 0124b97b-18d4-4f4b-8ce7-755a619b1097

2021-08-09 16:49:08 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8183 is already in use
2021-08-09 16:49:10 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-08-09 16:49:10 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8183 was already in use.

Action:

Identify and stop the process that's listening on port 8183 or configure this application to listen on another port.

2021-08-09 17:10:25 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.1.5.Final
2021-08-09 17:10:26 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-09 17:10:27 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service, config-client, profiles=[reactive_elastic_query], label=null, version=ac59bba17255769388ff9ef5ce9b1b1d68535fd2, state=null
2021-08-09 17:10:27 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/mcwiekala/config-server-repository/config-client.yml'}]
2021-08-09 17:10:27 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-09 17:10:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-09 17:10:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80ms. Found 0 Elasticsearch repository interfaces.
2021-08-09 17:10:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-09 17:10:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 73ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-09 17:10:28 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=a626301a-430f-3515-bf4d-6f253a749d20
2021-08-09 17:10:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 17:10:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 17:10:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 17:10:29 [main] WARN  o.s.data.convert.CustomConversions - Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-08-09 17:10:31 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 4d162665-05a1-478d-abc8-c5d6aef32e42

2021-08-09 17:10:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.0.4.RELEASE
2021-08-09 17:10:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.6.2
2021-08-09 17:10:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-09 17:10:32 [reactor-http-nio-1] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.6.2 - 7.9.1
2021-08-09 17:10:32 [reactor-http-nio-1] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch cluster: 7.9.1
2021-08-09 17:10:34 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port(s): 8183
2021-08-09 17:10:35 [main] INFO  p.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 12.09 seconds (JVM running for 14.542)
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterElasticQueryClient - Querying reactive elasticsearch for text: 'kafka'
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text: 'kafka'
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  p.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-09 17:10:49 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(1)
2021-08-09 17:10:50 [reactor-http-nio-1] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:10:50 [reactor-http-nio-1] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:10:50 [reactor-http-nio-1] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:10:50 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3225717103734251334, userId=4010281248610602185, text=amet, velit suscipit Kafka Nam ipsum, createdAt=2021-08-03T16:04:42))
2021-08-09 17:10:50 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - request(31)
2021-08-09 17:10:51 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6137127743714412377, userId=5056804551792720891, text=rutrum sit amet, Kafka placerat. vitae, createdAt=2021-08-03T16:24:03))
2021-08-09 17:10:51 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3506082286866713167, userId=5067066612423649830, text=fringilla magna amet, Kafka suscipit Nam, createdAt=2021-08-03T15:14:01))
2021-08-09 17:10:52 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7682623383644015897, userId=8596014041332644705, text=consectetur elit. elit. Kafka elit. tempus, createdAt=2021-08-03T15:14:42))
2021-08-09 17:10:52 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6249555392221455048, userId=42861239373994495, text=fringilla suscipit magna Kafka vitae Nam, createdAt=2021-08-03T15:19:52))
2021-08-09 17:10:53 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7667374205904564908, userId=5669044106934100917, text=nisl Nam sit Kafka sit magna, createdAt=2021-08-03T15:38:12))
2021-08-09 17:10:53 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8763138054039441609, userId=3882002449548172310, text=ipsum Lorem amet, Kafka sit Nam, createdAt=2021-08-03T15:46:02))
2021-08-09 17:10:54 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7460606723380247369, userId=3203075613589893978, text=amet, magna fringilla Kafka fringilla elit., createdAt=2021-08-03T16:28:32))
2021-08-09 17:10:54 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7533331089273789558, userId=4010044321417556903, text=velit sit velit Kafka Nam elit., createdAt=2021-08-03T16:28:43))
2021-08-09 17:10:55 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4128619793914699299, userId=3627332649447317015, text=nisl ipsum fringilla Kafka fringilla adipiscing, createdAt=2021-08-03T16:38:13))
2021-08-09 17:10:55 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2811519377108601601, userId=3981768382476260459, text=sit euismod vitae Kafka placerat. dolor, createdAt=2021-08-03T16:54:23))
2021-08-09 17:10:56 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2469629352647079021, userId=7922777660612272165, text=vitae Nam Vivamus Kafka suscipit tempus, createdAt=2021-08-03T18:05:44))
2021-08-09 17:10:56 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6607605084558917529, userId=5971910479668497030, text=rutrum consectetur euismod Kafka consectetur tempus, createdAt=2021-08-03T18:28:24))
2021-08-09 17:10:57 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8951776861431086967, userId=599909341088753847, text=magna rutrum Vivamus Kafka velit nec, createdAt=2021-08-03T18:27:14))
2021-08-09 17:10:57 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5849277126303394003, userId=3589655343579963220, text=suscipit Nam suscipit Kafka Vivamus elit., createdAt=2021-08-03T18:54:44))
2021-08-09 17:10:58 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7124862142031280024, userId=6304245588111124232, text=consectetur Vivamus amet, Kafka fringilla nec, createdAt=2021-08-03T18:57:34))
2021-08-09 17:10:58 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2204338845663957712, userId=5688402741631478353, text=placerat. euismod amet, Kafka adipiscing amet,, createdAt=2021-08-03T18:57:44))
2021-08-09 17:10:59 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5852894809290524936, userId=2963358023046469324, text=sit placerat. nisl Kafka adipiscing tempus, createdAt=2021-08-03T19:06:45))
2021-08-09 17:10:59 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8143424723376797302, userId=1551740996310292319, text=consectetur Nam amet, Kafka dolor Vivamus, createdAt=2021-08-03T19:16:05))
2021-08-09 17:11:00 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8223797093627129307, userId=6249362656792523375, text=dolor amet, nisl Kafka vitae Lorem, createdAt=2021-08-03T19:21:05))
2021-08-09 17:11:00 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5802279217664601622, userId=6430983870855218718, text=Vivamus ipsum sit Kafka elit. velit, createdAt=2021-08-03T19:27:55))
2021-08-09 17:11:01 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3315225334712814933, userId=5196953839809566516, text=consectetur Lorem elit. Kafka amet, amet,, createdAt=2021-08-03T19:58:05))
2021-08-09 17:11:01 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1335546594860363163, userId=4965657828378529787, text=Vivamus velit magna Kafka nisl elit., createdAt=2021-08-03T20:25:06))
2021-08-09 17:11:02 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8296555284094088254, userId=4453086746592844681, text=euismod suscipit Lorem Kafka rutrum rutrum, createdAt=2021-08-04T04:56:05))
2021-08-09 17:11:02 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:11:02 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3362664678970201406, userId=5257499415727103951, text=tempus dolor sit Kafka ipsum velit, createdAt=2021-08-04T05:57:56))
2021-08-09 17:11:03 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5486233351124336158, userId=1775493297451590444, text=suscipit elit. amet, Kafka vitae magna, createdAt=2021-08-04T06:27:59))
2021-08-09 17:11:03 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4820790780203836241, userId=8129726480152562123, text=dolor rutrum vitae Kafka amet, adipiscing, createdAt=2021-08-04T06:36:19))
2021-08-09 17:11:04 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4738158814142781926, userId=4150912831994924115, text=adipiscing tempus nisl Kafka placerat. amet,, createdAt=2021-08-04T06:39:09))
2021-08-09 17:11:04 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6462683905695734351, userId=2516190172816364654, text=placerat. amet, Nam Kafka Vivamus Vivamus, createdAt=2021-08-04T06:39:29))
2021-08-09 17:11:05 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8040644569187697215, userId=4971438761262631456, text=consectetur elit. suscipit Kafka adipiscing euismod, createdAt=2021-08-04T06:54:09))
2021-08-09 17:11:05 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7851909253691792457, userId=3636004441646828657, text=fringilla consectetur sit Kafka suscipit vitae, createdAt=2021-08-04T06:57:29))
2021-08-09 17:11:06 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8499258291330104239, userId=2283119479763398413, text=dolor Lorem tempus Kafka tempus ipsum, createdAt=2021-08-04T07:07:30))
2021-08-09 17:11:06 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4899788913911077758, userId=852987202628419343, text=nec rutrum consectetur Kafka dolor nisl, createdAt=2021-08-04T08:07:51))
2021-08-09 17:11:07 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5678212333119057069, userId=6479621776122534595, text=adipiscing adipiscing ipsum Kafka placerat. vitae, createdAt=2021-08-04T08:11:51))
2021-08-09 17:11:07 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=261260240160686621, userId=584675037309415825, text=ipsum euismod vitae Kafka magna fringilla, createdAt=2021-08-04T08:10:41))
2021-08-09 17:11:08 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2833888429031244494, userId=4876554214323967693, text=tempus velit sit Kafka nisl fringilla, createdAt=2021-08-04T09:04:48))
2021-08-09 17:11:08 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4127373758281658508, userId=2472658506720018590, text=nec sit Vivamus Kafka nec ipsum, createdAt=2021-08-04T09:17:58))
2021-08-09 17:11:09 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4612480281500534023, userId=798131679601710802, text=ipsum nisl tempus Kafka nisl Lorem, createdAt=2021-08-04T09:27:38))
2021-08-09 17:11:09 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3736089324494290873, userId=3312804231846439919, text=adipiscing amet, euismod Kafka velit consectetur, createdAt=2021-08-04T09:29:58))
2021-08-09 17:11:10 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1874319185608941995, userId=4663142497215361623, text=nisl tempus vitae Kafka tempus Lorem, createdAt=2021-08-04T09:50:43))
2021-08-09 17:11:10 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5302703765871693266, userId=4128688388201510335, text=tempus vitae Lorem Kafka consectetur amet,, createdAt=2021-08-04T10:11:23))
2021-08-09 17:11:11 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8309372588784429098, userId=8329485450988793375, text=nisl rutrum Vivamus Kafka suscipit dolor, createdAt=2021-08-04T10:38:53))
2021-08-09 17:11:11 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5021230353812432151, userId=3099706395164822104, text=adipiscing fringilla ipsum Kafka nec placerat., createdAt=2021-08-04T11:06:34))
2021-08-09 17:11:12 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5240386817356884281, userId=7367552352779811923, text=magna euismod sit Kafka adipiscing adipiscing, createdAt=2021-08-04T11:38:48))
2021-08-09 17:11:12 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3983428486220427139, userId=4699987726166678245, text=consectetur adipiscing sit Kafka rutrum nisl, createdAt=2021-08-04T11:45:58))
2021-08-09 17:11:13 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6036497246654668029, userId=1241251991800559323, text=magna nec magna Kafka tempus adipiscing, createdAt=2021-08-04T11:49:08))
2021-08-09 17:11:13 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3169928414545668526, userId=3603091490457122265, text=adipiscing dolor placerat. Kafka Lorem fringilla, createdAt=2021-08-04T11:54:38))
2021-08-09 17:11:14 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=77274902367075285, userId=7104422752845326783, text=velit nec vitae Kafka magna ipsum, createdAt=2021-08-04T12:36:29))
2021-08-09 17:11:14 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:11:14 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4218993852369439497, userId=760678123675841134, text=Lorem Nam amet, Kafka elit. amet,, createdAt=2021-08-04T12:45:59))
2021-08-09 17:11:15 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4144747582436625963, userId=4466637946596118349, text=elit. suscipit placerat. Kafka consectetur vitae, createdAt=2021-08-04T12:48:29))
2021-08-09 17:11:15 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5683844952830056190, userId=2806450489371258855, text=Vivamus Lorem fringilla Kafka sit euismod, createdAt=2021-08-04T12:48:59))
2021-08-09 17:11:16 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2570087526195331287, userId=7517863365383603944, text=Vivamus vitae placerat. Kafka Nam velit, createdAt=2021-08-04T12:52:09))
2021-08-09 17:11:16 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2576256741876753005, userId=8159460843021998705, text=sit elit. amet, Kafka dolor placerat., createdAt=2021-08-04T13:24:39))
2021-08-09 17:11:17 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4353090524270074844, userId=6938164006860358540, text=euismod consectetur consectetur Kafka elit. Lorem, createdAt=2021-08-04T14:13:20))
2021-08-09 17:11:17 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8628834435839815068, userId=1904595279175344174, text=nisl placerat. nisl Kafka velit adipiscing, createdAt=2021-08-09T09:54:03))
2021-08-09 17:11:18 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6627651823146371502, userId=1348482887473073877, text=Nam suscipit Lorem Kafka tempus sit, createdAt=2021-08-09T10:10:14))
2021-08-09 17:11:18 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=506799352384305777, userId=7172298187863955750, text=Nam Nam magna Kafka suscipit dolor, createdAt=2021-08-09T10:27:44))
2021-08-09 17:11:19 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8068750207170846841, userId=1560931267617046197, text=Lorem amet, placerat. Kafka consectetur adipiscing, createdAt=2021-08-09T10:54:24))
2021-08-09 17:11:19 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8430702404004260855, userId=5458455811102348441, text=ipsum suscipit Nam Kafka fringilla rutrum, createdAt=2021-08-09T11:01:24))
2021-08-09 17:11:20 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5646386529683043521, userId=3864831237371862060, text=Vivamus rutrum ipsum Kafka Nam placerat., createdAt=2021-08-09T11:00:14))
2021-08-09 17:11:20 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4769035633366447767, userId=729170252888518034, text=euismod dolor placerat. Kafka nec nec, createdAt=2021-08-09T11:04:14))
2021-08-09 17:11:21 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4627019234248577552, userId=3560039538570130868, text=Nam rutrum euismod Kafka euismod tempus, createdAt=2021-08-09T11:54:05))
2021-08-09 17:11:21 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=399810508711166504, userId=765533961121334492, text=placerat. suscipit euismod Kafka nec sit, createdAt=2021-08-09T11:58:35))
2021-08-09 17:11:22 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8103732846800921995, userId=3407358550433460239, text=fringilla nec Vivamus Kafka velit dolor, createdAt=2021-08-09T12:06:16))
2021-08-09 17:11:22 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1904178812871083651, userId=663575192743408805, text=consectetur nec suscipit Kafka tempus sit, createdAt=2021-08-09T12:15:36))
2021-08-09 17:11:23 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8316392862819763804, userId=5871718979904585212, text=Vivamus vitae rutrum Kafka tempus nisl, createdAt=2021-08-09T12:15:56))
2021-08-09 17:11:23 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4601561194421667253, userId=5764200667436878727, text=euismod dolor consectetur Kafka consectetur vitae, createdAt=2021-08-09T13:03:17))
2021-08-09 17:11:24 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5412715850946725907, userId=3459023053854501905, text=vitae sit amet, Kafka nec ipsum, createdAt=2021-08-09T13:19:07))
2021-08-09 17:11:24 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7871994493199082550, userId=1422210137132034892, text=Lorem suscipit tempus Kafka rutrum suscipit, createdAt=2021-08-09T13:24:17))
2021-08-09 17:11:25 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4432968952182836365, userId=7082533560591114486, text=nec suscipit Lorem Kafka velit elit., createdAt=2021-08-09T13:27:37))
2021-08-09 17:11:25 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6684611292257112188, userId=449382212818224790, text=Vivamus adipiscing nisl Kafka ipsum Nam, createdAt=2021-08-03T14:34:44))
2021-08-09 17:11:26 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2688525400309737446, userId=8129563129105070361, text=nisl nec Vivamus Kafka consectetur nec, createdAt=2021-08-03T14:34:54))
2021-08-09 17:11:26 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:11:27 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7975373904316177713, userId=59208127053631845, text=velit Nam placerat. Kafka fringilla euismod, createdAt=2021-08-03T14:44))
2021-08-09 17:11:27 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1904893579132406367, userId=4023164486620726462, text=euismod nisl Vivamus Kafka nec dolor, createdAt=2021-08-03T14:52:37))
2021-08-09 17:11:28 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7578841529815406532, userId=6578416526783315870, text=adipiscing placerat. euismod Kafka suscipit amet,, createdAt=2021-08-03T15:05:41))
2021-08-09 17:11:28 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=917985512184303271, userId=4790285960082376440, text=vitae tempus rutrum Kafka fringilla consectetur, createdAt=2021-08-03T15:08:41))
2021-08-09 17:11:29 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6959957217946608026, userId=2040269665547604522, text=adipiscing velit tempus Kafka magna magna, createdAt=2021-08-03T15:07:51))
2021-08-09 17:11:29 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6133199440388705506, userId=8754034086635490102, text=ipsum velit sit Kafka nisl Lorem, createdAt=2021-08-03T15:23:02))
2021-08-09 17:11:30 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2603219277516229564, userId=8699789650390115341, text=Vivamus fringilla elit. Kafka Vivamus sit, createdAt=2021-08-03T15:36:12))
2021-08-09 17:11:30 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8832821241179348926, userId=8420866118183619787, text=sit Nam nec Kafka dolor elit., createdAt=2021-08-03T15:42:52))
2021-08-09 17:11:31 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3013739497425171589, userId=2072139920703754058, text=euismod Nam dolor Kafka dolor nisl, createdAt=2021-08-03T15:48:42))
2021-08-09 17:11:31 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2892085453584061587, userId=7345023333629262086, text=nisl Lorem fringilla Kafka velit ipsum, createdAt=2021-08-03T17:12:03))
2021-08-09 17:11:32 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6351538099179758767, userId=8973220736071795420, text=tempus dolor consectetur Kafka elit. tempus, createdAt=2021-08-03T17:27:13))
2021-08-09 17:11:32 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2869441249861988096, userId=7803964993954321490, text=nisl adipiscing ipsum Kafka adipiscing magna, createdAt=2021-08-03T17:31:33))
2021-08-09 17:11:33 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2120635682163720633, userId=1388726098764385236, text=Vivamus Nam consectetur Kafka ipsum nec, createdAt=2021-08-03T17:39:03))
2021-08-09 17:11:33 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7989009399542092367, userId=8307491208155239240, text=nec amet, Vivamus Kafka euismod placerat., createdAt=2021-08-03T18:11:04))
2021-08-09 17:11:34 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7675562419409612123, userId=2306007807190949657, text=Lorem dolor placerat. Kafka tempus elit., createdAt=2021-08-03T18:17:44))
2021-08-09 17:11:34 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7222335016467064732, userId=7870249409143895324, text=rutrum euismod ipsum Kafka Nam placerat., createdAt=2021-08-03T18:23:24))
2021-08-09 17:11:35 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2297638620943640125, userId=336360526283609977, text=euismod sit Lorem Kafka ipsum placerat., createdAt=2021-08-03T18:22:54))
2021-08-09 17:11:35 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1795764445884037786, userId=837189581908996342, text=ipsum fringilla vitae Kafka Vivamus adipiscing, createdAt=2021-08-03T18:53:34))
2021-08-09 17:11:36 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3528467281794380229, userId=4397656295436922926, text=elit. vitae amet, Kafka adipiscing rutrum, createdAt=2021-08-03T18:53:04))
2021-08-09 17:11:36 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3119984349197622777, userId=7398691606990149750, text=vitae Vivamus Lorem Kafka nisl nec, createdAt=2021-08-03T19:38:55))
2021-08-09 17:11:37 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6230941046955122934, userId=3980527682259175317, text=euismod vitae fringilla Kafka magna consectetur, createdAt=2021-08-03T20:02:35))
2021-08-09 17:11:37 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3859630812127327135, userId=8250639217649166360, text=rutrum vitae Vivamus Kafka ipsum Vivamus, createdAt=2021-08-03T20:26:46))
2021-08-09 17:11:38 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4030404842752177707, userId=4086746737995673559, text=adipiscing Nam Lorem Kafka velit elit., createdAt=2021-08-04T05:44:16))
2021-08-09 17:11:38 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6539562392819098663, userId=7987153896688886271, text=velit nisl magna Kafka tempus elit., createdAt=2021-08-04T06:40:39))
2021-08-09 17:11:38 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:11:39 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7515647984687590087, userId=7004894822328571140, text=amet, amet, nec Kafka consectetur suscipit, createdAt=2021-08-04T06:47:49))
2021-08-09 17:11:39 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5358278364350597617, userId=8058543835045579139, text=suscipit ipsum ipsum Kafka Nam magna, createdAt=2021-08-04T07:21))
2021-08-09 17:11:40 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4729920971125261548, userId=496617424873983842, text=rutrum elit. consectetur Kafka nisl adipiscing, createdAt=2021-08-04T07:26:10))
2021-08-09 17:11:40 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4373701585555093821, userId=851866175515277000, text=nec velit magna Kafka Lorem rutrum, createdAt=2021-08-04T07:53:21))
2021-08-09 17:11:41 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2415038622103511769, userId=3978478714868762676, text=tempus fringilla vitae Kafka amet, tempus, createdAt=2021-08-04T09:11:08))
2021-08-09 17:11:41 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4719442620107680473, userId=4740031371452146499, text=nisl magna nec Kafka consectetur euismod, createdAt=2021-08-04T09:25:28))
2021-08-09 17:11:42 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1478678886548346112, userId=4748090621005314480, text=sit amet, nec Kafka rutrum Lorem, createdAt=2021-08-04T09:28:48))
2021-08-09 17:11:42 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1413897974588145557, userId=2196781817122714441, text=amet, nisl nec Kafka adipiscing adipiscing, createdAt=2021-08-04T09:43:52))
2021-08-09 17:11:43 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3228534091614495486, userId=2672972394164435641, text=dolor Vivamus vitae Kafka velit amet,, createdAt=2021-08-04T10:14:13))
2021-08-09 17:11:43 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8431677098279060084, userId=1214875245535404771, text=tempus amet, adipiscing Kafka fringilla nec, createdAt=2021-08-04T10:28:23))
2021-08-09 17:11:44 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3282307346182178140, userId=4785263131988161618, text=dolor euismod adipiscing Kafka placerat. velit, createdAt=2021-08-04T11:05:14))
2021-08-09 17:11:44 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6312679797672843315, userId=6657046371225551864, text=rutrum amet, tempus Kafka vitae ipsum, createdAt=2021-08-04T11:12:54))
2021-08-09 17:11:45 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2614528117823927474, userId=8738681904172064644, text=adipiscing tempus ipsum Kafka rutrum suscipit, createdAt=2021-08-04T11:59:08))
2021-08-09 17:11:45 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=514702101142857159, userId=7479893598939186312, text=placerat. fringilla consectetur Kafka rutrum Nam, createdAt=2021-08-04T12:07:38))
2021-08-09 17:11:46 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7251898183772308, userId=8975086727477564449, text=vitae Nam placerat. Kafka velit velit, createdAt=2021-08-04T12:47:49))
2021-08-09 17:11:46 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=9115631590584242337, userId=516185404746418389, text=nisl rutrum rutrum Kafka Nam rutrum, createdAt=2021-08-04T13:28:50))
2021-08-09 17:11:47 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8221494769355247806, userId=5619818987605852817, text=consectetur fringilla sit Kafka velit euismod, createdAt=2021-08-04T13:41:20))
2021-08-09 17:11:47 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8237845494101741537, userId=3955496052987051502, text=placerat. placerat. vitae Kafka elit. adipiscing, createdAt=2021-08-04T13:41))
2021-08-09 17:11:48 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3357086706247034327, userId=3734307357711188015, text=placerat. dolor ipsum Kafka sit Lorem, createdAt=2021-08-04T13:46:40))
2021-08-09 17:11:48 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4590822076882345214, userId=264552836965550403, text=Nam elit. nec Kafka consectetur fringilla, createdAt=2021-08-04T13:49:30))
2021-08-09 17:11:49 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=281119274138123196, userId=1990392213292071667, text=consectetur adipiscing rutrum Kafka ipsum suscipit, createdAt=2021-08-04T14:10:30))
2021-08-09 17:11:49 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7163329228573321971, userId=8068231600325147099, text=placerat. tempus Nam Kafka adipiscing adipiscing, createdAt=2021-08-09T09:58:43))
2021-08-09 17:11:50 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5883932459886593261, userId=3068545765952555272, text=placerat. nisl tempus Kafka rutrum tempus, createdAt=2021-08-09T10:03:23))
2021-08-09 17:11:50 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5672514412057532734, userId=3510969968012209347, text=Lorem fringilla euismod Kafka fringilla consectetur, createdAt=2021-08-09T10:17:04))
2021-08-09 17:11:50 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:11:51 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2888002827948346563, userId=4804983783209362253, text=tempus placerat. Vivamus Kafka elit. nisl, createdAt=2021-08-09T11:01:54))
2021-08-09 17:11:51 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=649740583058731321, userId=2846690984523998422, text=nisl amet, magna Kafka sit velit, createdAt=2021-08-09T11:05:04))
2021-08-09 17:11:52 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1631846089328929599, userId=8894332503838767540, text=rutrum Lorem nisl Kafka fringilla consectetur, createdAt=2021-08-09T11:23:25))
2021-08-09 17:11:52 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6922891458173514807, userId=8825479584617248043, text=dolor Lorem elit. Kafka suscipit consectetur, createdAt=2021-08-09T11:29:05))
2021-08-09 17:11:53 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1601870704002738446, userId=7915124894572302324, text=dolor ipsum consectetur Kafka elit. Lorem, createdAt=2021-08-09T11:28:35))
2021-08-09 17:11:53 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7846427817844300739, userId=3791484096462017689, text=adipiscing Vivamus amet, Kafka euismod velit, createdAt=2021-08-09T11:31:55))
2021-08-09 17:11:54 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5471337607827097695, userId=4915288264815097356, text=rutrum nec velit Kafka placerat. vitae, createdAt=2021-08-09T11:32:55))
2021-08-09 17:11:54 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5171415671338496748, userId=1149338632234406282, text=vitae Nam Lorem Kafka consectetur sit, createdAt=2021-08-09T11:53:25))
2021-08-09 17:11:55 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5645720640507196382, userId=6146066602247167897, text=nisl fringilla placerat. Kafka fringilla nec, createdAt=2021-08-09T12:01:35))
2021-08-09 17:11:55 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6788885683107782750, userId=5962875803881875929, text=elit. Nam fringilla Kafka amet, consectetur, createdAt=2021-08-09T12:29:06))
2021-08-09 17:11:56 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8161608370483726616, userId=4773121002921631735, text=magna consectetur consectetur Kafka consectetur sit, createdAt=2021-08-09T13:05:47))
2021-08-09 17:11:56 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3285672384142582964, userId=3061267354467088227, text=velit vitae Vivamus Kafka fringilla magna, createdAt=2021-08-09T13:31:27))
2021-08-09 17:11:57 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8040747259982487541, userId=1505325744487874050, text=vitae sit adipiscing Kafka dolor vitae, createdAt=2021-08-09T13:55:47))
2021-08-09 17:11:57 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5727662576770222947, userId=4220287153776448366, text=ipsum amet, amet, adipiscing Kafka nisl Nam, createdAt=2021-08-03T15:56:22))
2021-08-09 17:11:58 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7683852267909421221, userId=4688084461528303341, text=sit vitae Nam ipsum Kafka suscipit euismod, createdAt=2021-08-03T16:15:02))
2021-08-09 17:11:58 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4235666248149352721, userId=8584425355887273244, text=nec nisl nec dolor Kafka consectetur Nam, createdAt=2021-08-03T15:58:42))
2021-08-09 17:11:59 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5419841394756529431, userId=511726868305976967, text=magna nisl nisl rutrum Kafka amet, nisl, createdAt=2021-08-03T15:46:32))
2021-08-09 17:11:59 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4791939071628156765, userId=4365907722991044877, text=adipiscing fringilla magna Vivamus Kafka ipsum placerat., createdAt=2021-08-03T16:34:13))
2021-08-09 17:12:00 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8399286680661043784, userId=6070155477865062708, text=dolor nisl adipiscing Lorem Kafka Nam rutrum, createdAt=2021-08-03T16:33:43))
2021-08-09 17:12:00 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2237823390717004155, userId=1168161851138321730, text=Vivamus placerat. fringilla consectetur Kafka ipsum amet,, createdAt=2021-08-03T16:41:53))
2021-08-09 17:12:01 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5152053905391631160, userId=6905156379142641178, text=velit fringilla Nam velit Kafka Nam euismod, createdAt=2021-08-03T17:20:03))
2021-08-09 17:12:01 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=208573073408605350, userId=2572614552654177085, text=suscipit euismod vitae vitae Kafka fringilla magna, createdAt=2021-08-03T17:46:33))
2021-08-09 17:12:02 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3568173443372486202, userId=4921432196471484523, text=fringilla dolor Vivamus tempus Kafka sit tempus, createdAt=2021-08-03T17:47:24))
2021-08-09 17:12:02 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3929415176759138301, userId=3132681344518281456, text=nisl Vivamus amet, dolor Kafka magna placerat., createdAt=2021-08-03T17:50:24))
2021-08-09 17:12:02 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:12:03 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5746093243280225968, userId=4140146042973123956, text=elit. dolor magna suscipit Kafka rutrum Lorem, createdAt=2021-08-03T18:07:14))
2021-08-09 17:12:03 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3545422983163337430, userId=7784276147064133154, text=nisl nisl tempus adipiscing Kafka euismod adipiscing, createdAt=2021-08-03T18:16:14))
2021-08-09 17:12:04 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7474703314575518198, userId=975732969003443968, text=fringilla magna placerat. Nam Kafka nisl ipsum, createdAt=2021-08-03T18:15:24))
2021-08-09 17:12:04 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=9214486333913840074, userId=5897706694864922738, text=Nam amet, Nam amet, Kafka Vivamus Lorem, createdAt=2021-08-03T18:24:14))
2021-08-09 17:12:05 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4931035698885503067, userId=2299549703124231429, text=nisl dolor Nam rutrum Kafka suscipit tempus, createdAt=2021-08-03T19:24:15))
2021-08-09 17:12:05 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3098817504635430873, userId=4380016192683145028, text=Vivamus nisl euismod Lorem Kafka sit sit, createdAt=2021-08-03T19:48:05))
2021-08-09 17:12:06 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7368572742149914818, userId=3802157608092761179, text=tempus amet, rutrum tempus Kafka nec consectetur, createdAt=2021-08-04T05:15:55))
2021-08-09 17:12:06 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5536559440707705305, userId=756037560204113406, text=nisl adipiscing euismod Lorem Kafka sit adipiscing, createdAt=2021-08-04T05:34:36))
2021-08-09 17:12:07 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3179348678733006545, userId=2980509243031034202, text=ipsum dolor Lorem placerat. Kafka nec nec, createdAt=2021-08-04T05:49:16))
2021-08-09 17:12:07 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1641510536522542777, userId=1423894316995230488, text=sit nec Lorem sit Kafka amet, vitae, createdAt=2021-08-04T07:06:20))
2021-08-09 17:12:08 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4722134333918652223, userId=3760729858918205190, text=suscipit magna suscipit nisl Kafka euismod elit., createdAt=2021-08-04T07:10:20))
2021-08-09 17:12:08 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7339847723507793098, userId=1882585339410857198, text=ipsum Vivamus tempus vitae Kafka fringilla consectetur, createdAt=2021-08-04T07:13:10))
2021-08-09 17:12:09 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8008554421296771059, userId=6685805682065960459, text=euismod Lorem tempus Lorem Kafka nisl sit, createdAt=2021-08-04T07:21:30))
2021-08-09 17:12:09 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2839945426530011210, userId=7635356675569697635, text=vitae sit fringilla ipsum Kafka dolor Nam, createdAt=2021-08-04T07:52:01))
2021-08-09 17:12:10 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7250617460834214053, userId=4079945670661363257, text=ipsum nisl amet, suscipit Kafka tempus fringilla, createdAt=2021-08-04T08:14:11))
2021-08-09 17:12:10 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=428450765587751474, userId=4866858252929530636, text=ipsum Vivamus magna adipiscing Kafka ipsum nec, createdAt=2021-08-04T08:56:17))
2021-08-09 17:12:11 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=18658791675562073, userId=2881635454947266017, text=nec nec ipsum vitae Kafka sit nec, createdAt=2021-08-04T09:07:48))
2021-08-09 17:12:11 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5447370509615741645, userId=22616522292841686, text=placerat. vitae suscipit velit Kafka euismod rutrum, createdAt=2021-08-04T09:14:58))
2021-08-09 17:12:12 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4818021458469922839, userId=40484990237677188, text=fringilla adipiscing euismod velit Kafka vitae elit., createdAt=2021-08-04T09:26:28))
2021-08-09 17:12:12 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2988826650077282835, userId=4434577490499365073, text=dolor consectetur consectetur rutrum Kafka amet, Lorem, createdAt=2021-08-04T09:47:42))
2021-08-09 17:12:13 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2667902563621831188, userId=6694722600450300644, text=nec vitae amet, adipiscing Kafka Lorem Nam, createdAt=2021-08-04T09:57:03))
2021-08-09 17:12:13 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4151526060099296675, userId=8808006367199734204, text=dolor vitae nec sit Kafka fringilla suscipit, createdAt=2021-08-04T10:00:03))
2021-08-09 17:12:14 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1680108434085513510, userId=3021175983053724868, text=nec placerat. placerat. Lorem Kafka velit sit, createdAt=2021-08-04T10:11:53))
2021-08-09 17:12:14 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7538436687196102728, userId=5963179791496167984, text=fringilla magna Lorem nec Kafka adipiscing sit, createdAt=2021-08-04T10:23:33))
2021-08-09 17:12:14 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:12:15 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2891862360305456984, userId=2783790227074809156, text=amet, Vivamus adipiscing nec Kafka elit. elit., createdAt=2021-08-04T10:23:53))
2021-08-09 17:12:15 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6149867874003596882, userId=8741218886411293201, text=vitae euismod Lorem magna Kafka nisl nec, createdAt=2021-08-04T10:24:23))
2021-08-09 17:12:16 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7928221899864014273, userId=1978505868221916143, text=amet, fringilla nisl euismod Kafka magna nisl, createdAt=2021-08-04T10:29:23))
2021-08-09 17:12:16 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7600350868966927296, userId=2531429623234358192, text=fringilla Nam nec elit. Kafka nec velit, createdAt=2021-08-04T10:36:13))
2021-08-09 17:12:17 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5765080361979426254, userId=4479513969638882467, text=velit euismod adipiscing sit Kafka magna Vivamus, createdAt=2021-08-04T11:09:04))
2021-08-09 17:12:17 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=11948773096283823, userId=6766946443454258693, text=placerat. magna Vivamus Lorem Kafka velit dolor, createdAt=2021-08-04T11:37:28))
2021-08-09 17:12:18 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6001553401824762438, userId=2284664987220113096, text=dolor consectetur magna Lorem Kafka amet, suscipit, createdAt=2021-08-04T11:42:38))
2021-08-09 17:12:18 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2972831520631140135, userId=6711757473994488542, text=Lorem elit. consectetur amet, Kafka consectetur tempus, createdAt=2021-08-04T11:41:58))
2021-08-09 17:12:19 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6363075590736075395, userId=386640925287411830, text=suscipit fringilla nisl nisl Kafka Lorem Lorem, createdAt=2021-08-04T12:18:48))
2021-08-09 17:12:19 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7089604451071194661, userId=470081517235172436, text=fringilla adipiscing consectetur vitae Kafka placerat. magna, createdAt=2021-08-04T12:39:19))
2021-08-09 17:12:20 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1828524554994905897, userId=5983054812232591202, text=nisl dolor amet, euismod Kafka nisl nec, createdAt=2021-08-04T12:51:09))
2021-08-09 17:12:20 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3695939678986265229, userId=5670601565925678366, text=Lorem rutrum fringilla vitae Kafka vitae fringilla, createdAt=2021-08-04T13:03:39))
2021-08-09 17:12:21 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4001467197961392798, userId=8141556502640541405, text=consectetur placerat. sit tempus Kafka velit Vivamus, createdAt=2021-08-04T13:55:50))
2021-08-09 17:12:21 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2271274103200162060, userId=368274706874946743, text=consectetur euismod rutrum vitae Kafka vitae ipsum, createdAt=2021-08-04T13:55:40))
2021-08-09 17:12:22 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8779633261284564271, userId=6349592527949374125, text=suscipit magna amet, rutrum Kafka velit velit, createdAt=2021-08-04T14:01:10))
2021-08-09 17:12:22 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3435050432023553554, userId=304989830776462525, text=ipsum fringilla velit placerat. Kafka elit. nisl, createdAt=2021-08-04T14:09:40))
2021-08-09 17:12:23 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8246981278607870012, userId=7679379439181588273, text=rutrum Lorem adipiscing velit Kafka Nam magna, createdAt=2021-08-04T14:18:20))
2021-08-09 17:12:23 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2100897349388090866, userId=3201150618569085900, text=suscipit amet, rutrum adipiscing Kafka dolor tempus, createdAt=2021-08-09T09:47:33))
2021-08-09 17:12:24 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6290130728714674178, userId=6184086086181586865, text=placerat. nec Vivamus ipsum Kafka nec fringilla, createdAt=2021-08-09T10:06:53))
2021-08-09 17:12:24 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6853346769053439890, userId=8626618143366013054, text=Nam sit placerat. velit Kafka euismod sit, createdAt=2021-08-09T10:58:04))
2021-08-09 17:12:25 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8550588172924428064, userId=7575398080310570776, text=Lorem euismod nisl sit Kafka Lorem sit, createdAt=2021-08-09T11:15:05))
2021-08-09 17:12:25 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5688383949822818016, userId=8652662178524442983, text=Nam elit. rutrum placerat. Kafka Nam suscipit, createdAt=2021-08-09T11:34:05))
2021-08-09 17:12:26 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6774852594843786266, userId=5678895089923037749, text=nisl fringilla Nam fringilla Kafka euismod tempus, createdAt=2021-08-09T11:36:05))
2021-08-09 17:12:26 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4231207736147744861, userId=3030643129249711381, text=ipsum tempus suscipit fringilla Kafka rutrum consectetur, createdAt=2021-08-09T11:51:15))
2021-08-09 17:12:26 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:12:27 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7971419685803432350, userId=6385015575114272874, text=consectetur suscipit suscipit adipiscing Kafka euismod ipsum, createdAt=2021-08-09T11:58:25))
2021-08-09 17:12:27 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2913172090059372059, userId=6064502025508147355, text=magna magna elit. Lorem Kafka fringilla rutrum, createdAt=2021-08-09T12:03:05))
2021-08-09 17:12:28 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5944544124132648795, userId=9132362415937853457, text=placerat. vitae consectetur amet, Kafka vitae rutrum, createdAt=2021-08-09T12:45:36))
2021-08-09 17:12:28 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6350594153076939118, userId=1207991722719669550, text=Vivamus Lorem adipiscing tempus Kafka Vivamus placerat., createdAt=2021-08-09T12:52:16))
2021-08-09 17:12:29 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8733388656163847051, userId=7473883974299523244, text=fringilla ipsum tempus placerat. Kafka Nam tempus, createdAt=2021-08-09T12:57:17))
2021-08-09 17:12:29 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3434808606563108204, userId=813974487204650463, text=vitae placerat. amet, elit. Kafka dolor placerat., createdAt=2021-08-09T13:00:07))
2021-08-09 17:12:30 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7955015989419497428, userId=6082841388884743440, text=vitae euismod ipsum tempus Kafka suscipit adipiscing, createdAt=2021-08-09T13:34:17))
2021-08-09 17:12:30 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5657426058474186434, userId=5108697791845394325, text=amet, nec magna dolor Kafka suscipit elit., createdAt=2021-08-09T13:45:27))
2021-08-09 17:12:31 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5134448018038110719, userId=2410558962652838182, text=fringilla vitae rutrum nec Kafka ipsum amet,, createdAt=2021-08-03T14:36:44))
2021-08-09 17:12:31 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=139201509760027976, userId=2711757496545681543, text=consectetur Lorem placerat. ipsum Kafka sit ipsum, createdAt=2021-08-03T14:39:44))
2021-08-09 17:12:32 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2604349379553114637, userId=3904027512079753491, text=magna tempus euismod Lorem Kafka magna ipsum, createdAt=2021-08-03T14:45:10))
2021-08-09 17:12:32 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8915480230192754105, userId=8099266219866431987, text=fringilla magna amet, elit. Kafka vitae consectetur, createdAt=2021-08-03T14:59:31))
2021-08-09 17:12:33 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2972233868366765650, userId=1923833195660593331, text=placerat. nisl tempus dolor Kafka dolor Vivamus, createdAt=2021-08-03T15:07:41))
2021-08-09 17:12:33 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=285147447356677014, userId=170655722281469412, text=dolor Lorem Vivamus tempus Kafka fringilla Lorem, createdAt=2021-08-03T15:09:51))
2021-08-09 17:12:34 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6348736591971344006, userId=7920805588093244993, text=adipiscing ipsum sit nisl Kafka nisl Nam, createdAt=2021-08-03T15:10:51))
2021-08-09 17:12:34 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7951568281203509322, userId=2377694692819441379, text=ipsum placerat. Nam vitae Kafka elit. vitae, createdAt=2021-08-03T15:13:31))
2021-08-09 17:12:35 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8471039946335643011, userId=1342225354063736605, text=euismod magna nec fringilla Kafka consectetur nisl, createdAt=2021-08-03T15:15:12))
2021-08-09 17:12:35 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7942525711054075120, userId=6304838183299894068, text=dolor consectetur velit elit. Kafka magna Lorem, createdAt=2021-08-03T15:36:52))
2021-08-09 17:12:36 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7532270774108186825, userId=5914955843278715285, text=euismod sit placerat. placerat. Kafka vitae ipsum, createdAt=2021-08-03T16:02:12))
2021-08-09 17:12:36 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=502073646019824137, userId=3796890687689333804, text=vitae velit tempus fringilla Kafka sit euismod, createdAt=2021-08-03T16:14:02))
2021-08-09 17:12:37 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1270155380124872685, userId=6342196196089565690, text=rutrum tempus elit. tempus Kafka vitae velit, createdAt=2021-08-03T16:36:43))
2021-08-09 17:12:37 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7375484134392013406, userId=6783556388577785810, text=adipiscing adipiscing rutrum amet, Kafka fringilla Nam, createdAt=2021-08-03T16:58:23))
2021-08-09 17:12:38 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5602683003918061039, userId=5041171555241538893, text=nec Nam rutrum velit Kafka sit suscipit, createdAt=2021-08-03T17:32:13))
2021-08-09 17:12:38 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3027865833300794419, userId=4019614667231649649, text=nisl Lorem Vivamus elit. Kafka Nam vitae, createdAt=2021-08-03T17:37:33))
2021-08-09 17:12:38 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:12:39 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4068735781849641207, userId=824511723232263215, text=tempus elit. ipsum magna Kafka suscipit suscipit, createdAt=2021-08-03T18:07:34))
2021-08-09 17:12:39 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8963370467042906572, userId=610400704036339000, text=velit fringilla euismod tempus Kafka adipiscing adipiscing, createdAt=2021-08-03T18:11:54))
2021-08-09 17:12:40 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1523037783829053287, userId=6888467133050125423, text=consectetur velit velit elit. Kafka magna elit., createdAt=2021-08-03T18:34:54))
2021-08-09 17:12:40 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3473323362414413151, userId=915213525154021075, text=adipiscing elit. vitae euismod Kafka suscipit magna, createdAt=2021-08-03T18:43:44))
2021-08-09 17:12:41 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6139698987931683952, userId=8530894576220603966, text=placerat. Lorem ipsum elit. Kafka amet, magna, createdAt=2021-08-03T19:23:15))
2021-08-09 17:12:41 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4013276291541179037, userId=486645791756066674, text=nec amet, Nam Lorem Kafka consectetur velit, createdAt=2021-08-03T19:29:45))
2021-08-09 17:12:42 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=760676425222678376, userId=3539424286357603003, text=Nam Lorem dolor vitae Kafka elit. fringilla, createdAt=2021-08-03T20:07:45))
2021-08-09 17:12:42 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2392445975742343882, userId=9161346232622564284, text=Lorem Vivamus suscipit nec Kafka fringilla fringilla, createdAt=2021-08-03T20:16:16))
2021-08-09 17:12:43 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1497505790909801883, userId=6630920194221888588, text=magna Nam elit. sit Kafka rutrum Lorem, createdAt=2021-08-04T05:12:05))
2021-08-09 17:12:43 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7622327932951997154, userId=1361647466533876325, text=velit rutrum Lorem Lorem Kafka nisl velit, createdAt=2021-08-04T06:32:19))
2021-08-09 17:12:44 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3673016521209764960, userId=2278821796293294828, text=tempus fringilla amet, suscipit Kafka euismod tempus, createdAt=2021-08-04T07:17:30))
2021-08-09 17:12:44 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8521404402187367889, userId=1305101820060879366, text=suscipit rutrum tempus suscipit Kafka magna velit, createdAt=2021-08-04T07:20:10))
2021-08-09 17:12:45 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5537001974070152284, userId=934886143914241454, text=rutrum fringilla sit nec Kafka nisl consectetur, createdAt=2021-08-04T07:24))
2021-08-09 17:12:45 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4437339971232134679, userId=8093214983530463391, text=sit rutrum suscipit tempus Kafka Vivamus placerat., createdAt=2021-08-04T08:00:41))
2021-08-09 17:12:46 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3760956014922344290, userId=8567695430372666502, text=placerat. suscipit ipsum dolor Kafka consectetur velit, createdAt=2021-08-04T08:33:41))
2021-08-09 17:12:46 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8883463452943785963, userId=3584265746765793801, text=Lorem velit Lorem elit. Kafka magna dolor, createdAt=2021-08-04T09:00:27))
2021-08-09 17:12:47 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4428244758166320331, userId=8038124670196815771, text=fringilla adipiscing fringilla sit Kafka vitae velit, createdAt=2021-08-04T09:19:48))
2021-08-09 17:12:47 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5575143692230050073, userId=7943010278268486177, text=euismod euismod elit. velit Kafka rutrum amet,, createdAt=2021-08-04T09:49:32))
2021-08-09 17:12:48 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4378030018363394805, userId=4817058012634562184, text=suscipit Vivamus nisl sit Kafka magna placerat., createdAt=2021-08-04T10:35:03))
2021-08-09 17:12:48 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3429045744987774612, userId=8787767486028961377, text=sit elit. elit. amet, Kafka vitae consectetur, createdAt=2021-08-04T10:44:03))
2021-08-09 17:12:49 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7225474553041345440, userId=3718146297587036864, text=magna Nam Lorem rutrum Kafka amet, vitae, createdAt=2021-08-04T10:58:34))
2021-08-09 17:12:49 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3702175927630976273, userId=5598180757174975719, text=rutrum nisl fringilla amet, Kafka dolor velit, createdAt=2021-08-04T11:07:54))
2021-08-09 17:12:50 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=752080496956638332, userId=13800222887170588, text=nec Vivamus elit. placerat. Kafka amet, nec, createdAt=2021-08-04T11:43:28))
2021-08-09 17:12:50 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2840722557904234744, userId=85288440668133190, text=Nam amet, tempus ipsum Kafka suscipit placerat., createdAt=2021-08-04T11:50:38))
2021-08-09 17:12:50 [parallel-4] INFO  reactor.Flux.Map.1 - request(24)
2021-08-09 17:12:51 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4056676034525874378, userId=4817552507413568496, text=sit vitae euismod elit. Kafka Nam tempus, createdAt=2021-08-04T12:10:28))
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - cancel()
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-4] INFO  reactor.Flux.Map.1 - onContextUpdate(Context2{interface org.springframework.web.server.ServerWebExchange=org.springframework.web.server.adapter.DefaultServerWebExchange@6248ef76, interface org.springframework.security.core.context.SecurityContext=MonoFlatMap})
2021-08-09 17:12:51 [reactor-http-nio-1] WARN  r.n.http.client.HttpClientConnect - [id: 0xde786568, L:0.0.0.0/0.0.0.0:57047] The connection observed an error
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
2021-08-09 17:12:51 [reactor-http-nio-1] WARN  reactor.core.publisher.FluxUsingWhen - Async resource cleanup failed after cancel
reactor.netty.http.client.PrematureCloseException: Connection prematurely closed BEFORE response
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	|_ checkpoint ⇢ Request to DELETE http://localhost:9200/_search/scroll [DefaultWebClient]
Stack trace:
